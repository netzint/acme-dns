# Build stage for Go backend
FROM golang:1.21-alpine AS go-builder

RUN apk add --no-cache gcc musl-dev git

WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the binary
RUN CGO_ENABLED=1 GOOS=linux go build \
    -ldflags="-w -s" \
    -a -installsuffix cgo \
    -o acme-dns .

# Build stage for Angular frontend
FROM node:20-alpine AS ui-builder

WORKDIR /app

# Copy UI package files
COPY ui/package*.json ./
RUN npm ci

# Copy UI source code
COPY ui/ .

# Build the Angular app without base-href (API is on same host)
RUN npm run build

# Final stage - Runtime
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add ca-certificates && \
    update-ca-certificates

# Create user
RUN addgroup -g 1000 -S acmedns && \
    adduser -u 1000 -S acmedns -G acmedns

# Create directories
RUN mkdir -p /etc/acme-dns /var/lib/acme-dns /usr/share/acme-dns-ui && \
    chown -R acmedns:acmedns /etc/acme-dns /var/lib/acme-dns

# Copy backend binary
COPY --from=go-builder /build/acme-dns /usr/local/bin/acme-dns
RUN chmod +x /usr/local/bin/acme-dns

# Copy frontend files
COPY --from=ui-builder /app/dist/acme-dns-ui/browser /usr/share/acme-dns-ui
RUN chown -R acmedns:acmedns /usr/share/acme-dns-ui

# Copy config
COPY config.cfg /etc/acme-dns/config.cfg.example

# Switch to non-root user
USER acmedns

WORKDIR /var/lib/acme-dns

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# Expose ports
EXPOSE 53/tcp 53/udp 80/tcp 443/tcp

# Volumes
VOLUME ["/etc/acme-dns", "/var/lib/acme-dns"]

# Start acme-dns
ENTRYPOINT ["/usr/local/bin/acme-dns"]
CMD ["-c", "/etc/acme-dns/config.cfg"]